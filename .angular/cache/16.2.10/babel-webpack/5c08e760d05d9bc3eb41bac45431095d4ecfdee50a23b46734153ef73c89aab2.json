{"ast":null,"code":"import { __decorate } from \"tslib\";\n// login.component.ts\nimport { Component } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.loginError = '';\n  }\n  login() {\n    this.authService.login(this.email, this.password).subscribe(response => {\n      // Login exitoso\n      console.log('Login exitoso', response);\n      console.log('Token recibido:', response.token);\n      localStorage.setItem('token', response.token); // Almacena el token en localStorage\n      this.router.navigate(['/items/add']); // Redirige a la página después del inicio de sesión\n    }, error => {\n      // Error en el inicio de sesión\n      console.error('Error en el inicio de sesión', error);\n      if (error.status === 401) {\n        this.loginError = 'Credenciales incorrectas';\n      } else {\n        this.loginError = 'Error en el servidor al intentar iniciar sesión';\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","LoginComponent","constructor","authService","router","email","password","loginError","login","subscribe","response","console","log","token","localStorage","setItem","navigate","error","status","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Proyectos\\pryAutoEvaluacion\\src\\app\\login\\login.component.ts"],"sourcesContent":["  // login.component.ts\r\n  import { Component } from '@angular/core';\r\n  import { Router } from '@angular/router';\r\n  import { AuthService } from '../auth.service';\r\n\r\n  @Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.css'],\r\n  })\r\n  export class LoginComponent {\r\n    email: string = '';\r\n    password: string = '';\r\n    loginError: string = '';\r\n\r\n    constructor(private authService: AuthService, private router: Router) { }\r\n\r\n    login(): void {\r\n      this.authService.login(this.email, this.password).subscribe(\r\n        (response) => {\r\n          // Login exitoso\r\n          console.log('Login exitoso', response);\r\n          console.log('Token recibido:', response.token);\r\n          localStorage.setItem('token', response.token); // Almacena el token en localStorage\r\n          this.router.navigate(['/items/add']); // Redirige a la página después del inicio de sesión\r\n        },\r\n        (error) => {\r\n          // Error en el inicio de sesión\r\n          console.error('Error en el inicio de sesión', error);\r\n\r\n          if (error.status === 401) {\r\n            this.loginError = 'Credenciales incorrectas';\r\n          } else {\r\n            this.loginError = 'Error en el servidor al intentar iniciar sesión';\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n"],"mappings":";AAAE;AACA,SAASA,SAAS,QAAQ,eAAe;AASlC,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,UAAU,GAAW,EAAE;EAEiD;EAExEC,KAAKA,CAAA;IACH,IAAI,CAACL,WAAW,CAACK,KAAK,CAAC,IAAI,CAACH,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACG,SAAS,CACxDC,QAAQ,IAAI;MACX;MACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,QAAQ,CAAC;MACtCC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC9CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC;MAC/C,IAAI,CAACT,MAAM,CAACY,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,EACAC,KAAK,IAAI;MACR;MACAN,OAAO,CAACM,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MAEpD,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACX,UAAU,GAAG,0BAA0B;OAC7C,MAAM;QACL,IAAI,CAACA,UAAU,GAAG,iDAAiD;;IAEvE,CAAC,CACF;EACH;CACD;AA5BYN,cAAc,GAAAkB,UAAA,EAL1BnB,SAAS,CAAC;EACToB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWrB,cAAc,CA4B1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}