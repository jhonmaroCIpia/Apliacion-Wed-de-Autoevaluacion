{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_URL = 'http://localhost:3000/auth/login';\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  login(email, password) {\n    return this.http.post(API_URL, {\n      email,\n      password\n    }).pipe(tap(response => {\n      console.log('Respuesta del servidor:', response);\n      console.log('Token recibido:', response.token);\n      localStorage.setItem('token', response.token); // Almacena el token en localStorage\n      localStorage.setItem('rol', response.rol); // Almacena el rol en localStorage\n      this.router.navigate(['/items/add']); // Redirige a la página después del inicio de sesión\n    }, error => console.error('Error en la solicitud de inicio de sesión:', error)));\n  }\n  // Método para obtener el token del localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  // Método para obtener el rol del localStorage\n  getRol() {\n    return localStorage.getItem('rol');\n  }\n  // Método para obtener el token del localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["tap","API_URL","AuthService","constructor","http","login","email","password","post","pipe","response","console","log","token","localStorage","setItem","rol","router","navigate","error","getToken","getItem","getRol","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Proyectos\\pryAutoEvaluacion\\src\\app\\auth.service.ts"],"sourcesContent":["// auth.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, catchError, tap, throwError } from 'rxjs';\r\n\r\n// Define una interfaz para representar la respuesta del servidor\r\ninterface AuthResponse {\r\n  token: string;\r\n}\r\n\r\nconst API_URL = 'http://localhost:3000/auth/login';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http.post(API_URL, { email, password }).pipe(\r\n      tap(\r\n        (response) => {\r\n          console.log('Respuesta del servidor:', response);\r\n          console.log('Token recibido:', response.token);\r\n          localStorage.setItem('token', response.token); // Almacena el token en localStorage\r\n          localStorage.setItem('rol', response.rol); // Almacena el rol en localStorage\r\n          this.router.navigate(['/items/add']); // Redirige a la página después del inicio de sesión\r\n        },\r\n        (error) => console.error('Error en la solicitud de inicio de sesión:', error)\r\n      )\r\n    );\r\n  }\r\n\r\n  // Método para obtener el token del localStorage\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Método para obtener el rol del localStorage\r\n  getRol(): string | null {\r\n    return localStorage.getItem('rol');\r\n  }\r\n\r\n\r\n  // Método para obtener el token del localStorage\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n}\r\n"],"mappings":"AAGA,SAAiCA,GAAG,QAAoB,MAAM;;;AAO9D,MAAMC,OAAO,GAAG,kCAAkC;AAKlD,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAACP,OAAO,EAAE;MAAEK,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACtDT,GAAG,CACAU,QAAQ,IAAI;MACXC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,QAAQ,CAAC;MAChDC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAACG,KAAK,CAAC;MAC9CC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC;MAC/CC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEL,QAAQ,CAACM,GAAG,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACxC,CAAC,EACAC,KAAK,IAAKR,OAAO,CAACQ,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC,CAC9E,CACF;EACH;EAEA;EACAC,QAAQA,CAAA;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACtC;EAEA;EACAC,MAAMA,CAAA;IACJ,OAAOR,YAAY,CAACO,OAAO,CAAC,KAAK,CAAC;EACpC;EAGA;EACAD,QAAQA,CAAA;IACN,OAAON,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC,QAAAE,CAAA,G;qBAhCUrB,WAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1B,WAAW;IAAA2B,OAAA,EAAX3B,WAAW,CAAA4B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}