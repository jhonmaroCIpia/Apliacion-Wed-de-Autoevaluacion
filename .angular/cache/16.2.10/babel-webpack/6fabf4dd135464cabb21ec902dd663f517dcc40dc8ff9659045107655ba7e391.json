{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ItemService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/items';\n  }\n  addItem(item) {\n    const token = localStorage.getItem('token'); // Asegúrate de almacenar el token en localStorage al iniciar sesión\n    if (!token) {\n      // Puedes manejar la falta de token según tus necesidades (por ejemplo, redirigir a la página de inicio de sesión)\n      console.error('Token not found');\n      return;\n    }\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.post(`${this.apiUrl}/add`, item, {\n      headers\n    });\n  }\n  editItem(id, item) {\n    return this.http.put(`${API_URL}/editar/${id}`, item);\n  }\n  deleteItem(id) {\n    return this.http.delete(`${API_URL}/eliminar/${id}`);\n  }\n  static #_ = this.ɵfac = function ItemService_Factory(t) {\n    return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ItemService,\n    factory: ItemService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","ItemService","constructor","http","apiUrl","addItem","item","token","localStorage","getItem","console","error","headers","Authorization","post","editItem","id","put","API_URL","deleteItem","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Proyectos\\pryAutoEvaluacion\\src\\app\\item.service.ts"],"sourcesContent":["// item.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ItemService {\r\n  private apiUrl = 'http://localhost:3000/items';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  addItem(item: any): Observable<any> {\r\n    const token = localStorage.getItem('token'); // Asegúrate de almacenar el token en localStorage al iniciar sesión\r\n\r\n    if (!token) {\r\n      // Puedes manejar la falta de token según tus necesidades (por ejemplo, redirigir a la página de inicio de sesión)\r\n      console.error('Token not found');\r\n      return;\r\n    }\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`\r\n    });\r\n\r\n    return this.http.post(`${this.apiUrl}/add`, item, { headers });\r\n  }\r\n\r\n  editItem(id: number, item: any): Observable<any> {\r\n    return this.http.put(`${API_URL}/editar/${id}`, item);\r\n  }\r\n\r\n  deleteItem(id: number): Observable<any> {\r\n    return this.http.delete(`${API_URL}/eliminar/${id}`);\r\n  }\r\n}\r\n"],"mappings":"AAEA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B;EAEN;EAExCC,OAAOA,CAACC,IAAS;IACf,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAE7C,IAAI,CAACF,KAAK,EAAE;MACV;MACAG,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;MAChC;;IAGF,MAAMC,OAAO,GAAG,IAAIZ,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAE,UAAUN,KAAK;KAC/B,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACV,MAAM,MAAM,EAAEE,IAAI,EAAE;MAAEM;IAAO,CAAE,CAAC;EAChE;EAEAG,QAAQA,CAACC,EAAU,EAAEV,IAAS;IAC5B,OAAO,IAAI,CAACH,IAAI,CAACc,GAAG,CAAC,GAAGC,OAAO,WAAWF,EAAE,EAAE,EAAEV,IAAI,CAAC;EACvD;EAEAa,UAAUA,CAACH,EAAU;IACnB,OAAO,IAAI,CAACb,IAAI,CAACiB,MAAM,CAAC,GAAGF,OAAO,aAAaF,EAAE,EAAE,CAAC;EACtD;EAAC,QAAAK,CAAA,G;qBA5BUpB,WAAW,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}